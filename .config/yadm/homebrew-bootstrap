#!/usr/bin/env bash


# manually adding an item?:
# run maybrewer <homebrew lib>
#
# that just does & outputs this: 
# 
# # <output from:  brew info foo | head -n3 | tail -n2>
# maybrew "foo"

# (re)generating list of installed items?:
# in order to regenerate the list of installed packages with
# descriptions run
#   ~/.config/yadm/brews-extractor <path/to/output>
# and copy whatever bits of it you want after the
# following functions.
#
# NOTE: it'll take a while to run depending
# on how many packages you have installed.



# maybrew == maybe brew (install)
# $1 must be package to install
#
function maybrew() {
	if ! is_installed $1; then
		install_or_die "$1"
	else
		echo "-- Skipping $1 (installed already)"
	fi
}

function install_or_die() {
	brew install $1
	echo ""
	echo ""
	echo "-- Installing $1"
	brew install $1
	if [ $? -ne 0 ]; then
		echo "problem installing $1"
		echo "exiting"
		exit 1
	fi
}

function is_installed() {
	if brew ls --versions $1 > /dev/null; then
		# the package is installed
		true
	else
		# the package is not installed
		false
	fi
}

# install homebrew if we don't have it already
if ! command -v brew >/dev/null 2>&1; then
	echo "Installing homebrew"
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# contains gum
brew tap charmbracelet/tap
# contains days_progress, hey, oho, and private_comments
brew tap masukomi/homebrew-apps
# contains pgcli
brew tap dbcli/tap

brew tap d12frosted/emacs-plus
# tl;dr go client https://github.com/isacikgoz/tldr
brew tap isacikgoz/taps


# do gum first because this script uses it.
maybrew "charmbracelet/tap/gum"



# Strip or convert ANSI codes into HTML, (La)Tex, RTF, or BBCode
# http://www.andre-simon.de/doku/ansifilter/ansifilter.html
maybrew 'ansifilter'

# Record and share terminal sessions
# https://asciinema.org
maybrew 'asciinema'

# https://github.com/asdf-vm/asdf
# Manage multiple runtime versions with a single CLI tool, extendable via plugins
if ! is_installed "asdf"; then
	if ! is_installed "rbenv"; then
		gum confirm "Do you want me to install asdf?"
		if [ $? -eq 0 ]; then
			maybrew "asdf"
			asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git
			asdf plugin add janet https://github.com/Jakski/asdf-janet.git
			# sadly, can't avoid needing node...
			asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
			gum confirm "Do you want me to install a Ruby?"
			if [ $? -eq 0 ]; then
				version=$(gum input --value="latest")
				asdf install ruby $version
				asdf global ruby $version
			fi
			gum confirm "Do you want me to install a Janet?"
			if [ $? -eq 0 ]; then
				version=$(gum input --value="latest")
				asdf install janet latest
				asdf global janet $version
			fi
		fi
	else
		echo "WARNING: Won't install asdf because rbenv is installed"
	fi
fi


# Official Amazon AWS command-line interface
# https://aws.amazon.com/cli/
maybrew 'awscli'

# Bourne-Again SHell, a UNIX command interpreter
# https://www.gnu.org/software/bash/
maybrew 'bash'

# Bash unit testing enterprise edition framework for professionals
# https://github.com/pgrange/bash_unit
maybrew 'bash_unit'

# Clone of cat(1) with syntax highlighting and Git integration
# https://github.com/sharkdp/bat
maybrew 'bat'

# New way to see and navigate directory trees
# https://dystroy.org/broot/
maybrew 'broot'

# A tool for glamorous shell scripts
# https://charm.sh/
maybrew 'charmbracelet/tap/gum'

# Compiler for the Scheme programming language
# https://www.call-cc.org/
maybrew 'chicken'

# Statistics utility to count lines of code
# https://github.com/AlDanial/cloc/
maybrew 'cloc'

# Cross-platform make
# https://www.cmake.org/
maybrew 'cmake'

# GNU File, Shell, and Text utilities
# https://www.gnu.org/software/coreutils
maybrew "coreutils"


# Tools to manipulate dates with a focus on financial data
# installed for "datediff" / "ddiff"
# https://www.fresse.org/dateutils/
maybrew "dateutils"

ls /Applications/DevUtils.app > /dev/null
# normal is_installed doesn't work for devutils For some reason
# it just doesn't show up in brew ls --versions
if [ $? -ne 0 ]; then
	brew install devutils
	# opening it just to get past the "are you sure" dialog
	open /Applications/DevUtils.app
else
	echo "-- Skipping devutils (installed already)"
fi

# Load/unload environment variables based on $PWD
# https://direnv.net/
maybrew 'direnv'

# DOCKER THINGS
maybrew 'docker'
maybrew 'colima'
maybrew 'docker-compose'


# Disk Usage/Free Utility - a better 'df' alternative
# https://github.com/muesli/duf
maybrew 'duf'

# Diff that operates at the word level
# https://os.ghalkes.nl/dwdiff.html
maybrew 'dwdiff'

# Functional metaprogramming aware language built on Erlang VM
# https://elixir-lang.org/
maybrew 'elixir'

# Charset analyzer and converter
# https://cihar.com/software/enca/
maybrew 'enca'

# Modern replacement for 'ls'
# https://the.exa.website
maybrew 'exa'

# Command-line tool to interact with exercism.io
# https://exercism.io/cli/
maybrew 'exercism'

# Read, write, modify, and display EXIF data on the command-line
# https://libexif.github.io/
maybrew 'exif'

# Tool to plot realtime and stored data from the command-line
# https://github.com/dkogan/feedgnuplot
maybrew 'feedgnuplot'

# Simple, fast and user-friendly alternative to find
# https://github.com/sharkdp/fd
maybrew 'fd'

# macOS CLI for managing custom icons for files and folders
# https://github.com/mklement0/fileicon
maybrew 'fileicon'

# Collection of GNU find, xargs, and locate # https://www.gnu.org/software/findutils/
maybrew 'findutils'

# User-friendly command-line shell for UNIX-like operating systems
# https://fishshell.com
maybrew 'fish'

# Command-line outline and bitmap font editor/converter
# https://fontforge.github.io
maybrew 'fontforge'

# Monitor a directory for changes and run a shell command
# https://github.com/emcrisostomo/fswatch
maybrew 'fswatch'

# Command-line fuzzy finder written in Go
# https://github.com/junegunn/fzf
if ! is_installed "fzf"; then
    brew install fzf
    yes | $(brew --prefix)/opt/fzf/install
else
	echo "-- Skipping fzf (installed already)"
fi


# GitHub command-line tool
# https://github.com/cli/cli
maybrew 'gh'

# Distributed revision control system
# https://git-scm.com
maybrew 'git'

# Quickly rewrite git repository history
# https://github.com/newren/git-filter-repo
maybrew 'git-filter-repo'

# Find where a commit was merged in git
# https://github.com/mhagger/git-when-merged
maybrew 'git-when-merged'

# RAD tool for the GTK+ and GNOME environment
# https://glade.gnome.org/
maybrew 'glade'

# Open source programming language to build simple/reliable/efficient software
# https://go.dev/
maybrew 'go'

# GNU grep, egrep and fgrep # https://www.gnu.org/software/grep/
maybrew 'grep'

# Make JSON greppable
# https://github.com/tomnomnom/gron
maybrew 'gron'

# Command-line option parsing utility # https://github.com/util-linux/util-linux
maybrew 'gnu-getopt'

# Improved top (interactive process viewer)
# https://htop.dev/
maybrew 'htop'

# Configurable static site generator
# https://gohugo.io/
maybrew 'hugo'

# C/C++ and Java libraries for Unicode and globalization
# https://site.icu-project.org/home
maybrew "icu4c"

# fast and interactive tldr client written with go
# https://github.com/isacikgoz/tldr
maybrew 'isacikgoz/taps/tldr'

# International Ispell
# https://www.cs.hmc.edu/~geoff/ispell.html
maybrew 'ispell'


# imagemagick@6 is keg-only, which means it was not symlinked into /usr/local,
# because this is an alternate version of another formula.
#
# If you need to have imagemagick@6 first in your PATH run:
#   echo 'set -g fish_user_paths "/usr/local/opt/imagemagick@6/bin" $fish_user_paths' >> ~/.config/fish/config.fish
#
# For compilers to find imagemagick@6 you may need to set:
#   set -gx LDFLAGS "-L/usr/local/opt/imagemagick@6/lib"
#   set -gx CPPFLAGS "-I/usr/local/opt/imagemagick@6/include"
#
# For pkg-config to find imagemagick@6 you may need to set:
#   set -gx PKG_CONFIG_PATH "/usr/local/opt/imagemagick@6/lib/pkgconfig"
maybrew "imagemagick"

# Lightweight and flexible command-line JSON processor
# https://stedolan.github.io/jq/
maybrew 'jq'

# Command-line note taker
# http://jrnl.sh/en/stable/
maybrew 'jrnl'

# Library for JSON, based on GLib
# https://wiki.gnome.org/Projects/JsonGlib
maybrew 'json-glib'

# Simple terminal UI for git commands
# https://github.com/jesseduffield/lazygit/
maybrew 'lazygit'

# Fast and powerful Git hooks manager for any type of projects
# https://github.com/evilmartians/lefthook
maybrew 'lefthook'

# C library of Git core methods that is re-entrant and linkable
# https://libgit2.github.com/
maybrew 'libgit2'

# C XSLT library for GNOME
# http://xmlsoft.org/XSLT/
maybrew 'libxslt'


# NCurses toolkit for creating text-mode graphical user interfaces
# https://keep.imfreedom.org/libgnt/libgnt
maybrew "libgnt"

# Off-The-Record (OTR) messaging library
# https://otr.cypherpunks.ca/
# maybrew "libotr"

# Next-gen compiler infrastructure
# https://llvm.org/
maybrew "llvm"

# Text-based web browser
# https://invisible-island.net/lynx/
maybrew 'lynx'

# A simple command line chart of your progress through the day
# https://github.com/masukomi/days_progress
maybrew 'masukomi/apps/days_progress'

# Hey allows you to track your interruptions as they occur.
# https://interrupttracker.com
maybrew 'masukomi/apps/hey'

# Takes your colorful terminal output and converts it to HTML for sharing
# https://github.com/masukomi/oho
maybrew 'masukomi/apps/oho'

# A REST server to manage private comments on your code.
# https://github.com/masukomi/private_comments
maybrew 'masukomi/apps/private_comments'

# Scalable distributed version control system
# https://mercurial-scm.org/
maybrew 'mercurial'

# Like sed, awk, cut, join & sort for name-indexed data such as CSV
# https://github.com/johnkerl/miller
maybrew 'miller'

# Collection of tools that nobody wrote when UNIX was young
# https://joeyh.name/code/moreutils/
maybrew 'moreutils'

# MIME mail packing and unpacking
# https://web.archive.org/web/20190220145801/ftp.andrew.cmu.edu/pub/mpack/
maybrew 'mpack'

# Prompt theme engine for any shell
# https://ohmyposh.dev
maybrew 'oh-my-posh'

# ISO-C API and CLI for generating UUIDs
# https://web.archive.org/web/www.ossp.org/pkg/lib/uuid/
maybrew 'ossp-uuid'

# Swiss-army knife of markup format conversion
# https://pandoc.org/
maybrew 'pandoc'

# CLI for Postgres with auto-completion and syntax highlighting
# https://pgcli.com/
maybrew 'pgcli'

# Pinentry for GPG on Mac
# https://github.com/GPGTools/pinentry
maybrew 'pinentry-mac'

# Draw UML diagrams
# https://plantuml.com/
maybrew 'plantuml'

if ! is_installed "postgresql"; then
# Object-relational database system
# https://www.postgresql.org/
	brew install postgresql
	brew services start postgresql # start it
	psql postgres -c "create database $USER;"
else
	echo "-- Skipping postgresql (installed already)"
fi

# Monitor data's progress through a pipe # https://www.ivarch.com/programs/pv.shtml
maybrew 'pv'

maybrew "python" # python 3 yo!
# Program that can automate interactive applications
if ! is_installed "python"; then
	maybrew "python"
	pip install gcalcli
fi

# Pretty-print tabular data in Python
# https://pypi.org/project/tabulate/
maybrew 'python-tabulate'


if ! is_installed "rbenv"; then
	if ! is_installed "asdf"; then
		gum confirm "Do you want me to install rbenv?"
		if [ $? -eq 0 ]; then
			maybrew "rbenv"
			maybrew "ruby-build" # dunno why this is a thing, but it is
			gum confirm "Do you want me to install a ruby?"
			if [ $? -eq 0 ]; then
				latest=$( rbenv install -l 2>/dev/null | grep "^[[:digit:]]" | tail -n1)
				version=$(gum input --value="$latest")
				# there's an issue with open-ssl-1.1.1q
				# which means you need to set this CFLAGS option
				# I don't know which versions use a different version
				# so i'm just assuming it's required for all for now
				CFLAGS="-Wno-error=implicit-function-declaration" rbenv install $version
			fi
		fi
	else
		echo "WARNING: Won't install rbenv because asdf is installed"
	fi
fi
# Tools to work with human-editable, plain text data files
# https://www.gnu.org/software/recutils/
maybrew 'recutils'

# Library for command-line editing
maybrew "readline"
#   flags need to be set, but this is a path with more to it.
#   see ~/.config/fish/config.fish
#
#	set -gx LDFLAGS "-L/usr/local/opt/readline/lib"
#	set -gx CPPFLAGS "-I/usr/local/opt/readline/include"
#	set -gx PKG_CONFIG_PATH "/usr/local/opt/readline/lib/pkgconfig"

# readline is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides the BSD libedit library, which shadows libreadline.
# In order to prevent conflicts when programs look for libreadline we are
# defaulting this GNU Readline installation to keg-only.
#
# For compilers to find readline you may need to set:
#   set -gx LDFLAGS "-L/usr/local/opt/readline/lib"
#   set -gx CPPFLAGS "-I/usr/local/opt/readline/include"
#
# For pkg-config to find readline you may need to set:
#   set -gx PKG_CONFIG_PATH "/usr/local/opt/readline/lib/pkgconfig"

# Perl-powered file rename script with many helpful built-ins # http://plasmasturm.org/code/rename
maybrew 'rename'

# Search tool like grep and The Silver Searcher
# https://github.com/BurntSushi/ripgrep
maybrew 'ripgrep'

# Readline wrapper: adds readline support to tools that lack it
maybrew "rlwrap"

# RUST is installed via bootstrap now
# maybrew "rust"


# Intuitive find & replace CLI
# https://github.com/chmln/sd
maybrew 'sd'

# Static analysis and lint tool, for (ba)sh scripts
# https://www.shellcheck.net/
maybrew 'shellcheck'

# Version control system designed to be a better CVS
# https://subversion.apache.org/
maybrew 'subversion'

# Feature-rich console based todo list manager
# https://taskwarrior.org/
maybrew 'task'

# Your todo list in your terminal
# https://github.com/Swatto/td
maybrew 'td'

# Send macOS User Notifications from the command-line
# https://github.com/julienXX/terminal-notifier
maybrew 'terminal-notifier'

# Text interface for Git repositories
# https://jonas.github.io/tig/
maybrew 'tig'

# Command-line translator using Google Translate and more
# https://www.soimort.org/translate-shell
# maybrew "translate-shell"
# Display directories as trees (with optional color/HTML output)
# http://mama.indstate.edu/users/ice/tree/
maybrew "tree"


# Maintained ctags implementation
# https://github.com/universal-ctags/ctags
maybrew 'universal-ctags/universal-ctags/universal-ctags'

# Smart multi-file multi-part decoder
# http://www.fpx.de/fp/Software/UUDeview/
maybrew 'uudeview'

# Syntax-aware linter for prose
# https://docs.errata.ai/
#
maybrew 'vale'

# Pager/text based browser
# https://w3m.sourceforge.io/
maybrew 'w3m'

# Internet file retriever
# https://www.gnu.org/software/wget/
maybrew 'wget'

# Yet Another Dotfiles Manager
# https://yadm.io/
maybrew 'yadm'
# CLI to convert between YAML, TOML, JSON and HCL
# https://github.com/sclevine/yj
maybrew "yj"
# General-purpose data compression with high compression ratio
maybrew "xz"



# emacs
# brew tap d12frosted/emacs-plus
if ! is_installed "emacs-plus"; then
	~/bin/emacs-reinstaller
else
	echo "-- Skipping emacs-plus (installed already)"
fi


