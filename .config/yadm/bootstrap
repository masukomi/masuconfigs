#!/usr/bin/env bash


ssh -T git@github.com 2>&1 | grep "You've successfully authenticated"
if [ $? -ne 0 ]; then
	echo "I tried to connect to github with your ssh keys."
	echo "It didn't work."
	echo "Load your keys, then run"
	echo ""
	echo "ssh -T git@github.com"
	echo ""
	echo "Run me again after you get that working."
	exit 1
fi

GENERATE_SETUP_TASKS=0
echo "would you like me to generate manual setup tasklist? [y/n]"
read generate_tasks
if [ "$generate_tasks" == "y" ]; then
	GENERATE_SETUP_TASKS=1
fi

#system_type=$(uname -s)
#if [ "$system_type" = "Darwin" ]; then


function mayclone(){
	#$1 = base dir
	#$2 = repo
	basedir=$1
	mkdir -p $basedir
	subdir=$(basename $2 | sed -e "s/\.git//")
	if [ ! -d "$basedir/$subdir" ]; then
		git clone $2 $basedir/$subdir
	fi
}

function is_installed(){
	hash $1 >/dev/null 2>&1
	# if [ $? -eq 0 ] && [ "$(which go)" != "" ]; then
	if [ $? -eq 0 ]; then
		true
	else
		false
	fi
}

read -p "install / update xcode commandline tools? [y/n]
" command_line_tools

if [ "$command_line_tools" == "y" ]; then

	softwareupdate --all --install --force

	echo "If that didn't download Command Line Tools for Xcode, then run this:"
	echo sudo rm -rf /Library/Developer/CommandLineTools
	echo sudo xcode-select --install
	read "Hit enter to continue"
fi



mkdir -p "~/workspace"
# set up git-rook
# * lets me have multiple scripts executed per git hook
# * gives me a post-init functionality that'll set up a file with
#   a .vimrc that has just the plugins for this project
mayclone ~/workspace "git@github.com:masukomi/git-rook.git"
if [ ! -h ~/bin/git-rook ];then
	ln -s ~/workspace/git-rook/git-rook ~/bin/git-rook
fi

if ! is_installed "brew"; then
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	# sudo ln -s $(brew --cellar) /usr/local/Cellar
fi


if [[ "$OSTYPE" == "darwin"* ]]; then
	# Mac OSX
read -p "(re)run homebrew installs? [y/n]
" rerun_homebrew
	if [ "$rerun_homebrew" == "y" ]; then
		source "$HOME/.config/yadm/brews.sh"
	fi
else
	echo "Hey! You should create a brews.sh equivalent for $OSTYPE"
fi

#####
# HOMEBREW IS NOW AVAILABLE
# and various homebrew tools have been installed
#####
CELLAR=$(brew --cellar)

read -t 20 -p "download fonts? [y/n]
" fonts

if [ "$fonts" == "y" ]; then
	cd ~/Downloads
	# JetBrains Mono (includes Powerline glyphs)
	curl -s -L https://github.com/JetBrains/JetBrainsMono/releases/download/v2.242/JetBrainsMono-2.242.zip \
		--output JetBrainsMono-2.242.zip
	unzip JetBrainsMono-2.242.zip
	cp fonts/ttf/*.ttf ~/Library/Fonts/

	# Meslo LGS (Nerd Font edition)
	curl -s -L \
		https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf \
		--output ~/Library/Fonts/MesloLGS_NF_Regular.ttf

	# roboto mono family
	curl -s -L https://github.com/powerline/fonts/raw/master/Inconsolata/Inconsolata%20for%20Powerline.otf \
		--output ~/Library/Fonts/Inconsolata_for_Powerline.otf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Bold%20Italic%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Bold_Italic_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Bold%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Bold_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Italic%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Italic_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Light%20Italic%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Light_Italic_for_powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Light%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Light_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Medium%20Italic%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Medium_Italic_for_powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Medium%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Medium_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Thin%20Italic%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Thin_Italic_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20Thin%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_Thin_for_Powerline.ttf
	curl -s -L https://github.com/powerline/fonts/raw/master/RobotoMono/Roboto%20Mono%20for%20Powerline.ttf \
		--output ~/Library/Fonts/Roboto_Mono_for_Powerline.ttf
fi


read -t 20 -p "init / update doom? [y/n]
" doom

yadm submodule init
yadm submodule update --init --recursive --remote

if [ "$doom" == "y" ]; then
	~/bin/doom-reinstaller
fi



##########
# GEMs

read -p "install gems? [y/n]:
" install_gems
if [ "$install_gems" == "y" ]; then
	gem install bundler
	gem install aws-sdk
	gem install uniscribe
	gem install solargraph
	gem install reek
fi
##########

mkdir -p ~/workspace/reference
mkdir -p ~/.vim-tmp
mkdir -p ~/go/bin #because... fuck you go.

mayclone ~/workspace "git@github.com:kerma/defaultbrowser.git"
# MASUKOMI REPOS
mayclone ~/workspace "git@github.com:masukomi/cleandiff.git"
if [ ! -d ~/workspace/rtest ]; then
	mayclone ~/workspace "git@github.com:masukomi/rtest.git"
	ln -s ~/workspace/rtest/rtest ~/bin/rtest > /dev/null
fi
if [ ! -d ~/workspace/private_comments ]; then
	mayclone ~/workspace "git@github.com:masukomi/private_comments.git"
	ln -s ~/workspace/private_comments/bin/private_comments ~/bin/private_comments > /dev/null
fi
if [ ! -d ~/workspace/gpup ]; then
	mayclone ~/workspace "git@github.com:masukomi/gpup.git"
	ln -s ~/workspace/gpup/gpup ~/bin/gpup > /dev/null
	ln -s ~/workspace/gpup/gpud ~/bin/gpud > /dev/null
fi
mayclone ~/workspace "git@github.com:masukomi/git-status-report.git"
mayclone ~/workspace "git@github.com:masukomi/git_accessories.git"
#^^ requires secondary commands AFTER xcode is installed

mkdir -p ~/workspace/reference/c
if [ ! -d ~/workspace/reference/c/yajl ]; then
	mayclone ~/workspace/reference/c "git@github.com:lloyd/yajl.git"
	# A fast streaming JSON parsing library in C. http://lloyd.github.com/yajl
	cd ~/workspace/reference/c/yajl
	./configure && make install
fi
cd ~/


# install Cask https://github.com/cask/cask
# the Private Comments Mode bulid script needs this
# Cask simplifies sandboxing for emacs developers
if [ ! -d ~/workspace/reference/emacs/cask ]; then
	echo "installing emacs cask"
	mkdir -p ~/workspace/reference/emacs
	cd ~/workspace/reference/emacs
	git clone https://github.com/cask/cask
	cd cask
	make install
	make install # i don't understand why, but whatever
	cd ~/
fi


echo "Setting iTerm preference folder"
defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.iterm2"

# disable the @#$%@#$ back and forth swipe in chrome
defaults write com.google.Chrome.plist AppleEnableSwipeNavigateWithScrolls -bool FALSE

# install rust stuff
if ! is_installed "rustc"; then
	echo "installing rust stuff"
	#install via rustup
	# yes '' just sends an enter which we need to choose the default
	# Install option
	yes '' | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
	rustup toolchain add nightly
	cargo +nightly install racer
	cargo install silicon
fi

# broot is an interactive form of tree
cargo install broot
# ruut also you to easily generate tree diagrams
cargo install ruut

read -p "install chicken scheme stuff? [y/n]:
" chicken_stuff

if [ "$chicken_stuff" == "y" ]; then
	# install chicken scheme stuff
	readline_version=$(brew list readline --versions | sed -e "s/.* //")
	export CSC_OPTIONS="-I$CELLAR/readline/$readline_version/include -L$CELLAR/readline/$readline_version/lib -Wl,-flat_namespace,-undefined,suppress"
	unset readline_version
	#chicken-install readline
	chicken-install apropos
	chicken-install chicken-doc
	chicken-install linenoise
	chicken-install simple-loops
	chicken-install directory-utils
	chicken-install regex
	chicken-install srfi-18
	chicken-install srfi-128
	chicken-install srfi-63
	chicken-install medea
	chicken-install filepath
	chicken-install spiffy spiffy-request-vars intarweb
	chicken-install shell
	chicken-install sha2 message-digest
	chicken-install http-client
	# chicken < 5 instructions
	# cd `csi -p '(import chicken.platform)(chicken-home)' | tail -n1`
	# curl http://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx
	# chicken > 5 instructions
	cd `csi -R chicken.platform -p '(chicken-home)'`
	curl https://3e8.org/pub/chicken-doc/chicken-doc-repo-5.tgz | sudo tar zx
fi

# requires `chicken-install linenoise` to have been run first

# RVM
# gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
# curl -sSL https://get.rvm.io | bash -s stable

# GPG CONFIG
# based on tips here: https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e
# killing agent to ensure new one is started based on new configs
killall gpg-agent 2>&1 > /dev/null

# RBENV
if ! is_installed "rbenv"; then
	read -p "install rbenv? [y/n]
	" rbenv_install
	if [ "$rbenv_install" == "y" ]; then
		brew install rbenv ruby-build
		rbenv init
		# test that it's working
		curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash
		if [ $? -ne 0 ]; then
			echo "something went wrong with rbenv install. exit bootstrap?  [y/n]"
			read exit_bootstrap
			if [ "$exit_bootstrap" == "y" ]; then
				exit 1
			fi
		fi
		latest_ruby=$(rbenv install --list | grep "^[[:digit:]]" | tail -n1)
		read -p "install latest ruby ($latest_ruby)? [y/n]" install_latest_ruby
		if [ "$install_latest_ruby" == "y" ]; then
			rbenv install $latest_ruby
			rbenv local $latest_ruby
		fi
	fi
fi
# TODO Same deal but for ASDF

# System Prefs
# make the mouse go faster.... maybe I can't see a difference
# defaults  read -g com.apple.mouse.scaling => 3
defaults  write -g com.apple.mouse.scaling 5


#####
if [ $GENERATE_SETUP_TASKS -eq 1 ]; then
	echo "setting up todo items for you"


echo "- [  ] set ⌘^v as Vim Anywhere shortcut under services in window that just opened
- [  ] add: /usr/local/bin/fish to /etc/shells
  echo \"/usr/local/bin/fish\" | sudo tee -a /etc/shells
  chsh -s /usr/local/bin/fish

- [  ] add: your ssh keys (and load the github one)
- [  ] download: Inconsolata (not -g or -gz)
- [  ] run: chsh -s /usr/local/bin/fish
- [  ] run: fish shell integration commands
- [  ] run:sudo pip3 install -I urlscan
- [  ] run: urlscan -g
- [  ] download roboto mono
- [  ] https://fonts.google.com/specimen/Roboto+Mono
- [  ] Install Dropbox
- [  ] Install Chrome
- [  ] Install Firefox
- [  ] Install Xcode
- [  ] Install Fantastical
- [  ] Install Kaleidoscope
- [  ] https://www.kaleidoscopeapp.com/download
- [  ] Install OmniGraffle
- [  ] Install Slack
- [  ] Copy Scuttlebutt's gossip.json from the other box
- [  ] Copy Scuttlebutt's gossip.json from the other box
- [  ] Install Patchwork (Scuttlebutt)
- [  ] boot Patchwork and let sync get started
- [  ] Install Quiver
- [  ] Install Marked 2
- [  ] Install Monodraw
- [  ] Install Noizio
- [  ] Install Tweetbot
- [  ] Install Deckset
- [  ] Install Fenestro
- [  ] Install Tad
- [  ] run ln -s /Applications/Tad.app/Contents/Resources/tad.sh ~/bin/tad
- [  ] Set Ascii font in iterm 2 to roboto mono 18
- [  ] rvm default 2.6.3 (or whatever)
- [  ] doom: M-x all-the-icons-install-fonts" > ~/_MANUAL_TODO_LIST.txt
open ~/_MANUAL_TODO_LIST.txt


	echo "I'M DONE. Here are your todo items"
fi
