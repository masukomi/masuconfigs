#!/usr/bin/env ruby

require 'octokit'


# BEGIN FUNCTIONS -----------------------
def usage
  message=<<~END
  USAGE: extract_prs_from_branch <branch> [<status>]
         status is optional and can be 'all', 'open', or 'closed'

         Defaults to looking for closed PRs.
         This is to help release managers know what's
         in the impending release.

         NOTE: EXTRACT_PRS_TOKEN environment variable
         must be set with a GitHub Personal API token.
         A personal access token created in GitHub for this app.
         Use a fine-grained token and give it read-only access
         to Contents, Metadata, Pull Requests.

         Call with -h to see this message again.
  END
  puts message
  exit(1)
end
def choose_repo
  repos_list = `git remote -vv`.split("\n")
  repos = repos_list
    .select{|l| /\(fetch\)/.match l }
    .map{|l|
      l.gsub(/^.*:|\.git.*$/, '')
    }
  return repos.first if repos.size == 1
  puts "Please choose a repo:"
  repos.each_with_index {|repo, index|
    puts "[#{index}] #{repo}"
  }
  user_index = gets.strip
  if user_index != ''
    user_index = user_index.to_i
    if user_index > -1 && user_index < repos.size
      return repos[user_index]
    end
  end
  puts "Please try again and enter a valid number."
  exit 2
end

def extract_tickets_from_lines(lines)
  found_tickets = []
  lines.each do |line|
    m = /\[#?(\w+-\d+)\]/.match(line)
    m = / *\[?#?(([a-zA-Z]{2}[a-zA-Z0-9]{0,1})-?(\d{3,}))\]? +/.match(line) unless m
    m = /Merge pull request #\d+ from \w+\/(([a-zA-Z]{2}[a-zA-Z0-9]{0,1})[_-]?(\d{3,}))[_-].*?/.match(line) unless m
    m = /^(([a-zA-Z]{2}[a-zA-Z0-9]{0,1})[_-](\d{3,}))\W+/.match(line) unless m
    if m
      ticket = m[1].upcase
      unless ticket.include? '-'
        ticket = "#{m[2]}-#{m[3]}".upcase
      end
      found_tickets.push(ticket)
      next
    # else # for debugging
    #   puts "no match: #{line}"
    end
  end
  found_tickets.uniq.sort
end

def extract_tickets_from_prs(prs, only_merged=true)
  lines = []
  prs.each do |pr|
    if !only_merged or (only_merged and !pr['merged_at'].nil?)
      lines.push(pr.title)
      body = pr['body'] || 'NO DETAILS'
      lines += body.split("\n")
    end
  end
  extract_tickets_from_lines(lines)
end

def puts_tickets(tickets)
  tickets.each do |ticket|
    puts ticket
  end
end

def puts_pr_info(pr)
  puts "* #{pr.title}"
  puts "  by #{pr["head"]["user"]["login"]}"
  puts "  #{pr["html_url"]}"
end

# END FUNCTIONS -----------------------
# BEGIN PROCEDURAL CODE----------------

# BEGIN GATHERING REQUIREMENTS
branch = ARGV[0]
status_modifier = ARGV.length > 1 ? ARGV[1] : nil
closed_prs = status_modifier == 'closed' || status_modifier.nil?
all_prs = status_modifier == 'all'
open_prs = status_modifier == 'open'

token=ENV['EXTRACT_PRS_TOKEN']

usage if ! branch || branch == '-h'

usage if token.nil? || token == ''

repo = choose_repo # guaranteed to produce a valid repo or die

# END GATHERING REQUIREMENTS


client = Octokit::Client.new(:access_token => token)
# client.login
# client.user.login

#client.pull_requests('RBM-Technologies/vmm', {:base=>'development'})
# the remote branch
#client.pull_requests('RBM-Technologies/vmm', {:base=>'development'}).first["head"]["ref"]
# the repo it came from
#client.pull_requests('RBM-Technologies/vmm', {:base=>'development'}).first["head"]["repo"]["url"]

# repo = client.repo('RBM-Technologies/vmm')


# puts "Extracting tickets from #{branch}"

prs = []
if closed_prs or all_prs
  # $stderr.puts("XXX closed")  if closed_prs
  # $stderr.puts("XXX all") if all_prs
  closed = client.pull_requests(repo,
                                {:base=>branch,
                                 :state=>'closed'})
  closed.each do |cpr|
    puts_pr_info(cpr)
  end
  prs += closed
end
if open_prs or all_prs
  # $stderr.puts("XXX open") if open_prs
  # $stderr.puts("XXX all") if all_prs
  open = client.pull_requests(repo,
                                {:base=>branch,
                                 :state=>'open'})

  open.each do | opr |
    puts_pr_info(opr)
  end
    prs += open
end


puts_tickets(extract_tickets_from_prs(prs))
