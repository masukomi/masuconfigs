#!/bin/sh

set -e

# Before we get the token, redirect stdout to stderr.
exec 3>&1 1>&2

export LC_ALL=C

echo() {
  printf '%s\n' "$*"
}

help() {
  echo "Time-based One-time Password Generator"
  echo
  echo "USAGE: $(printf %q "$(basename -- "$0")") <key> [server] [interval]"
  echo
  echo "If you wish to pipe in the key use -p as the 1st argument"
  echo
  echo "The default update interval is 30 seconds."
  echo
  echo "Supported servers: Google, GitHub, GitLab, Bitbucket"
  exit 0
}

TOTP_SECRET=$1
TOTP_SERVER=${2:-Google}
TOTP_INTERVAL=${3:-30}

if [ "$TOTP_SECRET" == "-p" ]; then
  read TOTP_SECRET;
fi

if [ -z "${TOTP_SECRET}"  ]; then
  help
fi
TOTP_SECRET=$(echo "${TOTP_SECRET}" | tr -d ' ')
TOTP_SERVER=$(echo "${TOTP_SERVER}" | tr A-Z a-z)

if [ ! "${TOTP_INTERVAL}" -gt 0 ] 2>&-; then
  echo "The update interval must be a positive integer: ${TOTP_INTERVAL}"
  echo
  help
fi
# Remove leading zeros.
TOTP_INTERVAL=$(printf %d "${TOTP_INTERVAL}")

TOTP_PERIOD=$(( ($(date +%s)) / TOTP_INTERVAL ))

hex_pack() {
  if type xxd >&- 2>&-; then
    xxd -p | tr -cd 0-9A-Fa-f
  else
    od -A n -t x1 -v | tr -cd 0-9A-Fa-f
  fi
}

hex_unpack() {
  if type xxd >&- 2>&-; then
    xxd -r -p
  else
    for hh in $(tr -cd 0-9A-Fa-f | awk '{gsub(/../, "& ");print}'); do
      if [ "${#hh}" -eq 2 ]; then
        printf %b "\\0$(printf %03o "$(( 0x${hh} ))")"
      else
        return
      fi
    done
  fi
}

# NUL is harmful to bash.
gen_digest() {
  local hexkey=$1 period=$2
  printf %016X "${period}" |
    hex_unpack |
      openssl dgst -sha1 -mac hmac -macopt "hexkey:${hexkey}" |
        cut -d' ' -f2
}

# https://tools.ietf.org/html/rfc6238
gen_token() {
  local secret=$1 server=$2 period=$3
  case "${server}" in
    # https://github.com/google/google-authenticator/wiki/Key-Uri-Format
    google | github | gitlab | bitbucket)
      local key=$(echo "${secret}" | base32 -d | hex_pack)
      [ -z "${key}" ] && exit 1
      # The digest is a 160-bit hexadecimal number string.
      local digest=$(gen_digest "${key}" "${period}" | tr -cd 0-9A-Fa-f)
      [ "${#digest}" -ne 40 ] && exit 2
      # Read the last 4 bits and convert it into an unsigned integer.
      local start=$(( (0x$(echo "${digest}" | cut -b 40)) * 2 + 1))
      [ "${start}" -gt 33 ] && exit 3
      # Read a 32-bit positive integer and take at most six rightmost digits.
      local hexes=$(echo "${digest}" | cut -b "${start}-$(( start + 7 ))")
      local token=$(( ((0x${hexes}) & 0x7FFFFFFF) % 1000000 ))
      # Pad the token number with leading zeros if needed.
      printf '%06d\n' "${token}" >&3
      ;;
    *)
      echo "Your server is not supported: ${server}"
      echo
      help
  esac
}

gen_token "${TOTP_SECRET}" "${TOTP_SERVER}" "${TOTP_PERIOD}"
