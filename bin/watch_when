#!/usr/bin/env bash
# written by Pat Collins https://burned.com
# Polls a command and reports when its output changes.
# modified by masukomi

function usage(){
  echo "USAGE: watch_when -c \"<command>\" [-s sleep_interval] [-x \"<command for when it changes>\"]"
  echo "     -c <command> tells it what command to execute and watch"
  echo "     -s <seconds> tells it how long to sleep between executions"
  echo "        defaults to 2 seconds"
  echo "     -x <command> optional command to run when the output changes"
  echo ""
  echo "     The supplied command will be evaluated,"
  echo "     and called every 2 seconds (or sleep interval seconds"
  echo "     if supplied). When the output changes it will print"
  echo "     it out with a timestamp."
  echo "     ^c to stop it. or -x 'exit'"
  echo ""
  echo "     If you have terminal-notifier installed it'll try and use that"
  echo "     to provide additional notification."

}

if [ $# -eq 0 ]; then
  usage
  exit 0
fi
while getopts "c:s:x:" opt; do
  case ${opt} in
    c)
      COMMAND=${OPTARG}
      ;;
    s)
      SLEEP=${OPTARG}
      ;;
    x)
      CHANGED_COMMAND=${OPTARG}
      ;;
    h)
      usage
      exit 0
      ;;
  esac
done
if [ "$SLEEP" == "" ]; then
  SLEEP=2
fi

# https://github.com/vjeantet/alerter/issues/46
SOMEONE_FIXED_ALERTER=0
command -v alerter > /dev/null
ALERTER=$?
command -v terminal-notifier > /dev/null
TERMINAL_NOTIFIER=$?

last=""
output=""
first_time="true"
while [[ true ]]; do
  output=$(eval "$COMMAND")
  if [[ $last != $output ]] && [ "$first_time" != "true" ]; then
    echo -n "$output"
    echo -en "\t"
    echo $(date -u +"%Y-%m-%dT%H:%M:%SZ")
    last=$output
    if [ "$CHANGED_COMMAND" != "" ]; then
      eval "$CHANGED_COMMAND"
    else
      if [ $SOMEONE_FIXED_ALERTER -ne 0 ] && [ $ALERTER -eq 0 ] ; then
        alerter -title watch_when -message "Something changed! Check the terminal." --timeout 0
      elif [ $TERMINAL_NOTIFIER -eq 0 ]; then
        terminal-notifier -message "Something changed! Check the terminal." -title "watch_when"
      fi
      echo "$output"
      echo "ðŸ‘†THE OUTPUT CHANGED!!!!"
    fi
    exit 0
  elif [[ "$first_time" == "true" ]]; then
    echo "watching..."
    last=$output
    first_time="false"
  fi

  sleep $SLEEP
done
