#!/usr/bin/env ruby
require 'json'

GH_API_TOKEN = ENV['PR_STATUSES_API_TOKEN']
GH_USERNAME = "masukomi"
# BASE is a root developement directory that you keep your directories
# under. For example: ~/workspace
BASE = "#{Dir.home}/workspace/dutchie".freeze
# directories directly under BASE that you wish to skip
IGNORABLE_DIRS = %w[DutchiePay2].freeze
# string identifier of the check that you should ignore
# For example if you wanted to ignore
# ci/circleci: Build Error ...details here
# you'd add ci/circleci to this list
IGNORABLE_PR_CHECKS = %w[ci/circleci].freeze

def error_and_die(message)
  STDERR.puts(message)
  STDERR.puts("Exiting.")

  exit 1
end

if GH_API_TOKEN.to_s == ''
  error_and_die("Please define the PR_STATUSES_API_TOKEN environment variable.
Docs here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token")
end

def output_approved_reviews(author, author_reviews)
  puts "\e[32mApproved by #{author}\e[0m"
  author_reviews.each do | ar |
    if ar["state"]=="APPROVED" && ar["body"] != ""
      puts ar["body"]
    end
  end
end

def get_remote_details(remote)
  extract_remote_components(`git config --get remote.#{remote}.url`.strip)
end
def extract_remote_components(remote_url)
  #git@github.com:Owner/Repo.git
  match = remote_url.match(/.*?:(?<owner>\S+?)\/(?<repo>\S+?)\..*?/)
  {
    owner: match[:owner],
    repo: match[:repo],
    url: remote_url
  }
end
def get_current_remote()
  #TODO: make this support multiple remotes
  #      I think we'll need to make some sort of git config
  #      to store prefs
  #      maybe git config --set pr-statuses.upstream-remote

  stored_remote = `git config --get "pr-statuses.upstream-remote" 2>/dev/null`.strip
  return stored_remote if stored_remote != ""
  remotes = `git remote`.strip.split("\n")
  if remotes.size == 1
    store_upstream_remote(remotes.first)
    return remotes.first
  end
  new_upstream = get_remote_from_user(remotes)
  store_upstream_remote(new_upstream)
  new_upsteream
end

def get_remote_from_user(remotes)
  puts "Please enter the name of the remote where you make your PRs"
  puts "* " + remotes.join("\n* ")
  new_upstream = gets.chomp
  if ! remotes.include new_upstream
    puts "That wasn't one of the choices. Please try again"
    get_remote_from_user(remotes)
  end
  new_upstream
end

def store_upstream_remote(upstream_remote)
  `git config --add pr-statuses.upstream-remote #{upstream_remote}`
  retrieved = `git config --get pr-statuses.upstream-remote`.strip
  retrieved
end

def output_unapproved_reviews(author, author_reviews)
  states = author_reviews.map{ |ar| ar["STATE"] }.uniq.compact
  return if states.size == 0 # sometime's there's a nil state
  puts "\e[34m#{author}: #{states.join(", ")} \e[0m"
end

def output_reviews_by_author(reviews_by_author, excluding_user)
  reviews_by_author.delete(excluding_user)
  if reviews_by_author.keys.size == 0
    puts "\tNo reviews yet"
    return
  end

  reviews_by_author.each do | author, author_reviews|
    next if author == excluding_user
    approved = author_reviews.any?{ |ar| ar["state"] == 'APPROVED' }
    output_approved_reviews(author, author_reviews) if approved
    output_unapproved_reviews(author, author_reviews) unless approved
  end
end

def output_comments_by_author(comments_by_author, excluding_user)
  count = 0
  comments_by_author.each do | author, author_comments|
    next if author == excluding_user
    puts "- \e[1;33;40m#{author}\e[0m"
    author_comments.each do | comment|
      count += 1
      puts "\t(#{comment[:id]}) #{comment[:html_url]}"
      puts "\t#{comment[:body]}"
    end
  end
  puts "\tNo comments yet"
end

def extract_comments_by_author(remote_details, pr_num)
  # https://docs.github.com/en/rest/reference/pulls#get-a-pull-request
  # get /repos/{owner}/{repo}/pulls/{pull_number}
  # curl -s -u #{GH_USERNAME}:#{PR_STATUSES_API_TOKEN} https://api.github.com/repos/octocat/hello-world/pulls/2169/comments
  curl_string = "curl -s -u #{GH_USERNAME}:#{GH_API_TOKEN} https://api.github.com/repos/#{remote_details[:owner]}/#{remote_details[:repo]}/pulls/#{pr_num}/comments"

  full_response = JSON.parse(`#{curl_string}`.strip)
  #    avatar_url: comment["user"]["avatar_url"],
  comments_by_author = Hash.new{ |h,k| h[k] = [] }
  full_response.each do |comment|
    comments_by_author[comment["user"]["login"]] << {
      body: comment["body"],
      html_url: comment["html_url"],
      id: comment["id"]
    }
  end
  comments_by_author
end

def extract_reviews_by_author(remote_details, pr_num)

  response = JSON.parse(`gh pr view #{pr_num} --json reviews`.strip)
  reviews = response["reviews"]

  reviews_by_author=Hash.new{ |h,k| h[k] = [] }
  reviews.each do | review |
    author = review["author"]["login"]
    reviews_by_author[author] << review
  end

  reviews_by_author
end

def extract_failed_checks(pr_num)
  checks = `gh pr checks #{pr_num}`.strip.split("\n")
  return [] if checks.size == 0
  failed_checks = []
  checks.each do | check |
    passed = check.include?("pass")
    next if IGNORABLE_PR_CHECKS.any?{|x|check.start_with? x }
    (failed_checks << check) unless passed
  end
  failed_checks
end

def output_failed_checks(failed_checks)
  if failed_checks.size > 0
    puts "Failed checks:"
    failed_checks.each do | fc |
      puts "\e[31m#{fc}\e[0m"
    end
  end
end


def get_pr_details(remote_details, pr_num)
  # https://docs.github.com/en/rest/reference/pulls#get-a-pull-request
  # get /repos/{owner}/{repo}/pulls/{pull_number}
  # curl -s -u #{GH_USERNAME}:#{PR_STATUSES_API_TOKEN} https://api.github.com/repos/octocat/hello-world/pulls/2169/comments
  curl_string = "curl -s -u #{GH_USERNAME}:#{GH_API_TOKEN} https://api.github.com/repos/#{remote_details[:owner]}/#{remote_details[:repo]}/pulls/#{pr_num}"

  JSON.parse(`#{curl_string}`.strip)
end

def extract_requested_reviewers(pr_json)
  all_reviewers = []
  pr_json["requested_reviewers"].each{|user|
    all_reviewers << user["login"]
  }
  pr_json["requested_teams"].each {|team|
    all_reviewers << team["name"]
  }
  all_reviewers
end

def output_requested_reviewers(reviewers)
  if reviewers.size > 0
    puts "Requested reviewers:"
    reviewers.each do | r |
      puts "- #{r}"
    end
  else
    puts "\t\e[31mNO REQUESTED REVIEWERS\e[0m"
  end
end

def output_draft_status(pr_json)
  puts "\e[1;30;43mTHIS IS A DRAFT\e[0m" if pr_json["draft"]
end


### ---- main loop

checked_dirs = []
begin
  Dir.chdir(BASE) do
    Dir.each_child("./") do | child |
      child = child.gsub(/[^a-zA-Z0-9_-]/, "")

      next if IGNORABLE_DIRS.include? child
      next if File.file? child

      begin
        Dir.chdir(child) do
          # returns 128 if the dir is not part of a git repo
          next unless system("git -C ./ rev-parse")


          checked_dirs << child

          response = `gh pr list -A #{GH_USERNAME} 2>/dev/null`.strip.split("\n")
          #STDERR.puts response.join("\n")
          next if response.size == 0
          puts "\e[0;37;44m#{child} ----------------------------------\e[0m"
          # new
          remote_details = get_remote_details(get_current_remote())

          # old
          response.each do | pr_line |
            pr_num = pr_line.match(/^(\d+).*/)[1] rescue nil
            error_and_die("Unable to extract PR number from\n\t#{pr_line.inspect}") unless pr_num
            pr_title = pr_line.split("\t")[1]


            # puts "\e[1;33;40m#{pr_num}: #{pr_title}\e[0m"
            puts "\e[1;30;47m#{pr_num}: #{pr_title}\e[0m"
            pr_details = `gh pr view #{pr_num} --json url`.strip

            pr_url = JSON.parse(pr_details)["url"]
            puts pr_url

            full_pr_details = get_pr_details(remote_details, pr_num)

            puts "source branch: #{full_pr_details["head"]["ref"]}"

            output_draft_status(full_pr_details)

            output_failed_checks(extract_failed_checks(pr_num))

            puts ""

            output_requested_reviewers(extract_requested_reviewers(full_pr_details))

            reviews_by_author = extract_reviews_by_author(remote_details, pr_num )
            comments_by_author = extract_comments_by_author(remote_details, pr_num )

            output_reviews_by_author(reviews_by_author, GH_USERNAME)
            output_comments_by_author(comments_by_author, GH_USERNAME)
          end

        end
      rescue NameError, Errno::ENOENT => e
        unless child.end_with? "DS_Store"
          STDERR.puts("problem looking up PR data for #{child}: #{e.message}")
        end
      rescue StandardError => e
        STDERR.puts("unexpected exception: #{e.message}")
        exit(2)
      end
    end
  end
rescue NameError, Errno::ENOENT
  STDERR.puts("Error switching into directories.")
  STDERR.puts("Is your BASE variable correct? #{BASE}")
  exit 78 #EX_CONFIG
end

puts "\n\n\e[1;32;40mDone.\e[0m\nchecked dirs: #{checked_dirs.sort.join(", ")}"
