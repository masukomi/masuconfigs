# Clu documentation file. Details: https://github.com/masukomi/Clu

# the name of the command or function you're documenting
name="ruut"
# a short (one line) description of what it does
short_description="converts simple nested parens structure into tree-like output"
description="""
ruut is a great tool by [Hazel Bachrach](https://tech.lgbt/@hibachrach)
for making diagrams that resemble the output of the `tree` command.
For example:

```text
❯ ruut 'Parent (Child 1, Child 2 (Grandchild 1, Grandchild 2), Child 3)'
Parent
├── Child 1
├── Child 2
│   ├── Grandchild 1
│   └── Grandchild 2
└── Child 3
```

I use this so infrequently that I can never remember what it's called.
This doc gets it into [clu](https://github.com/masukomi/Clu#readme),
which helps me to find it again when I need it.
"""

usage_command="ruut --help"
# fallback_usage="""
# USAGE: fallback_usage is used when
# usage_command is not present"""

# is this an executable, function, or ???
type="executable"
# what language is it written in?
language="rust"
# where you can find this specific file in source control
source_url="https://github.com/hibachrach/ruut"
# where you can find the repo that contains this file
source_repo_url="https://github.com/hibachrach/ruut"
# additional keywords that might help you find this in a search
# or when browsing by tag
# future functionality: https://github.com/masukomi/Clu/issues/10
tags=[ "3rd_party" ]

