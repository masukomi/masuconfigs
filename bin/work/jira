#!/usr/local/bin/bash

# A tool for opening jira tickets
# and outputting the markdown ticket link for them
# based on the branch name conventions of my
# current employer.
#
# Alter the regexp in the -b option to match your team's
# convention for encoding ticket IDs in branches.

# DEPENEDNCIES:
# * reqires my `workspace` command, but you can just
#   hardcode the URL of your jira instance in the WORKSPACE variable
#   below.
#   https://github.com/masukomi/masuconfigs/blob/master/bin/workspace
# * sd - a better sed
#   https://github.com/chmln/sd



function usage () {
	echo "Usage: $(basename $0) -[b|o|m|h] [ticket]"
	echo " -b: extracts ticket from branch name."
	echo "     saves you from typing it manually"
	echo "     and inevitably fat-fingering it."
	echo "     can be combined with other flags."
	echo " -o: open in browser. If -b isn't specified"
	echo "      this will expect you to pass in the ticket number"
	echo " -m: generate markdown. If -b isn't specified"
	echo "      this will expect you to pass in the ticket number."
	echo " -e: generate an org-mode link. If -b isn't specified"
	echo "      this will expect you to pass in the ticket number."
	echo " -t: output the ticket number"
	echo " -h: output this help"
	echo ""
	echo " Example of combined usage: "
	echo " jira -bom will:"
	echo "      * extract the ticket name from the branch,"
	echo "      * output the markdown link"
	echo "      * open the url in your browser (macos only)"
	echo " jira -bt will:"
	echo "      * print the ticket number"
}
VALID_ARGS=`getopt tbomeh? $*`
if [[ $? -ne 0 ]]; then
	usage
	exit 1;
fi

current_branch=$(git current-branch)

set -- $VALID_ARGS
while :; do
	case "$1" in
		-b)
			if [[ "$current_branch" == *"JIRA-IGNORE"* ]]; then
				TICKET="JIRA-IGNORE"
			else
				TICKET=$(echo "$current_branch" | sd '.*?(?P<ticket>(eng|ENG)-\d+).*' '$ticket')
			fi
			if [ "$TICKET" == "" ]; then
				echo "UNABLE TO DETERMINE TICKET FROM BRANCH: $BRANCH"
				echo ""
				usage
				exit 3
			fi
			TICKET=$(echo $TICKET | tr [:lower:] [:upper:])
			shift
			;;
		-m)
			MARKDOWN="true"
			shift
			;;
		-e) # e for emacs
			ORGMODE="true"
			shift
			;;
		-o)
			OPEN="true"
			shift
			;;
		-t)
			TICKET_ID="true"
			shift;
			;;
		?|-h)
			usage
			exit 1
			;;
		--)
			shift
			break
			;;
		# *)
		# 	echo "unknown arg '$1'"
		# 	;;
	esac
done
for var in "$@"
do
	var=$(echo "$var" | grep -v "^-")
	#^^^ never managed to get regexp or substring matches
	# to find things starting (or not starting) with a hyphen
	if [ "$var" != "" ]; then
		TICKET=$(echo $var | tr [:lower:] [:upper:])
		break
	fi
done


# echo "TICKET:   $TICKET"
# echo "BRANCH:   $BRANCH"
# echo "MARKDOWN: $MARKDOWN"
# echo "OPEN:     $OPEN"

if [ "$TICKET" == "" ]; then
	echo "no ticket found / specified"
	echo ""
	usage
	exit 2
fi

if [[ -n "$TICKET_ID" ]]; then
	echo $TICKET
	echo $TICKET | pbcopy
	exit 0
fi

WORKSPACE=$(workspace)
if [ "$WORKSPACE" == "" ]; then
	echo "(Only because you didn't run from within ~/workspace/<client>)"
	read -p "Specify Atlassian subdomain: " WORKSPACE
fi

OUTPUT=""
if [ "$MARKDOWN" == "true" ]; then
	OUTPUT="[$TICKET](https://$WORKSPACE.atlassian.net/browse/$TICKET)"
elif [ "$ORGMODE" == "true" ]; then
	OUTPUT="[[https://$WORKSPACE.atlassian.net/browse/$TICKET][$TICKET]]"
else
	OUTPUT="https://$WORKSPACE.atlassian.net/browse/$TICKET"
fi

echo $OUTPUT
echo $OUTPUT | pbcopy

if [ "$OPEN" == "true" ]; then
	open "https://$WORKSPACE.atlassian.net/browse/$TICKET"
fi

exit 0

