# the name of the command or function you're documenting
name="r-classpathify"
# a short (one line) description of what it does
short_description="Translates Module X; class Y; lines in a ruby file to X::Y for STDOUT"
description="""
Ruby geeks frequently need to refer to a class by its fully qualified
name. But there's nowhere to get that name in the appropriate format.

For example:

```ruby
module Foo
  module Bar
   class Baz
     ...
   end
  end
end
```

The developer would need to refer to that as `Foo::Bar::Baz` in their
code.

So, point `r-classpathify` at the file in question and it'll read that in,
and generate the appropriate single-line version for you.

Integrate this with your editor and you can get it to just tell you
the "classpathified" name of the current file. How to do that is an
exercise for the reader.

"""
usage_command="r-classpathify"
# fallback_usage="""
# USAGE: fallback_usage is used when
# usage_command is not present"""

# is this an executable, function, or ???
type="executable"
# what language is it written in?
language="ruby"
# where you can find this specific file in source control
source_url="https://github.com/masukomi/masuconfigs/blob/master/bin/r-classpathify"
# where you can find the repo that contains this file
source_repo_url="https://github.com/masukomi/masuconfigs"
tags=["ruby"]

# [[cheats]]
# [[cheats.bar]]
# description = "a description of task bar with backtrace_details"
# template="bar {{arg1}} {{arg2}}"
# [[cheats.baz]]
# description = "a description of task baz with backtrace_details"
# template="bar {{arg1}} {{arg2}}"
