#!/bin/bash

# In GitHub when you click the name of a branch in a PR
# it will copy <repo>:<branch_name> if it's from a forked repo.
# but that's not useful for checking the thing out.
#
# git-cop lets you say
# git cop <pasted-thing-from-github>
# and it strips out the <repo>: if it exists

ESCAPE=$(printf "\033")
RED="${ESCAPE}[91m"
GREEN="${ESCAPE}[92m"
NOCOLOR="${ESCAPE}[0m"


if [ "$1" != "" ]; then
  PR_BRANCH=$(echo "$1" | sed -e "s/^.*://")
  REMOTE=$(echo "$1" | sed -e "s/:.*//")
  git remote | grep $REMOTE
  if [ $? -ne 0 ]; then
    echo $RED"❌ CHECKOUT FAILED \"$REMOTE\" is not a known remote"$NOCOLOR;
    exit 1
  fi
  git checkout $PR_BRANCH
  if [ $? -eq 0 ]; then
    echo $GREEN"✅ CHECKOUT SUCCEEDED"$NOCOLOR;
  else
    echo $RED"❌ CHECKOUT FAILED"$NOCOLOR;
  fi
else
  echo "USAGE: git-cop <branch name>"
  echo "       NOTE: branch name can be a 'normal' branch name"
  echo "       OR one of the identifiers you get from GitHub"
  echo "       when you copy the branch from a PR from a forked repo."
  echo "       Those look like <username>:<branch_name>"
  echo "       In that scenario this presumes that you have already"
  echo "       checked out their fork as a remote."
  echo ""
  echo "       Due to limitations of git, this _will_ fail if the"
  echo "       same branch name exists in more than one remote."
  exit 0
fi
exit 0

