#!/usr/bin/env bash

# an interactive cli tool to help you create commit messages
#
#
# Usage: git com [-f <git config file path>]
#        Just follow the prompts after that.
#        NOTE: supports simple templating via backticks
#              in the ticket, description, and tags field.
#        SIDE NOTE: "com" is short for commit. ;)
# Configuration:
#        ticket numbers can be auto-inserted if you have
#        an executable tool that can provide it when called.
#        If you do: store the command to execute in your
#        git config under
#        com.ticket-command
#
# NOTE: tags are stored under the com.tags key in your
#       each git repo you use it in. This allows for
#       different tags for each project
#       types are stored under the com.types key
#
# Inspired by Conventional Commits Standard
# Alas, as an English speaker
# it felt backwards to me to have a guaranteed verb with an
# optional noun in parens to describe the commit.
# E.g. "fix"?! Fix WHAT?!!?
#
# And yes... https://xkcd.com/927/



# Based on code from makers of Charm and Gum
# requires gum to be installed.
# https://github.com/charmbracelet/gum
# Distributed under the MIT License
# MIT License
#
# Copyright (c) 2021 Charmbracelet, Inc & 2022 Kay Rhodes A.K.A. masukomi
# LICENSE
# https://github.com/charmbracelet/gum/blob/fb4a9e6320e6a52ace2979f87391d582c8d123f6/LICENSE

function clear_last_line () {
	echo -en "\e[1A\e[K" ;printf "\r"
}
function clear_last_2_lines () {
	echo -en "\e[1A\e[K\e[1A[K" ;printf "\r"
}

function request_ticket_number () {
	TICKET=""
	if [ $# -gt 0 ]; then
		TICKET="$1"
	fi

	if [ "$TICKET" == "" ]; then
		gum input --placeholder "ticket number(s) (optional):"
	else
		gum input --value "$TICKET"
	fi

}

STASHED_FILES=$(git diff --name-only --cached)
if [ "$STASHED_FILES" == "" ]; then
	echo "üõë  No staged files. Quitting"
	exit 1
fi

GIT_CONFIG_FILE=''
while getopts "f:" opt; do
	case ${opt} in
		f)
			GIT_CONFIG_FILE="--file=${OPTARG}"
			;;
	esac
done


GIT_COM_TAGS=$(git config $GIT_CONFIG_FILE --get com.tags | xargs -n1 | sort -u | xargs)
if [ $? != 0 ]; then
	GIT_COM_TAGS=""
fi

eval "TAG_CHOICES=($GIT_COM_TAGS)";

GIT_COM_TYPES=$(git config "$GIT_CONFIG_FILE" --get com.types | xargs -n1 | sort -u | xargs)
if [ $? != 0 ]; then
	GIT_COM_TYPES="fix feat add docs test refactor cleanup"
fi
eval "TYPE_CHOICES=($GIT_COM_TYPES)";

echo "Specify a change type"
# choose from list
#
MAYBE_TYPE=$(gum choose ${TYPE_CHOICES[@]} ".new" )
if [[ "$MAYBE_TYPE" == *".new"* ]]; then
	MAYBE_TYPE=$(echo "$MAYBE_TYPE" | sed -e "s/\.new//" -e "s/  / /g")
	MAYBE_TYPE="$MAYBE_TYPE $(gum input --placeholder "new type (no spaces):")"
fi
clear_last_line
# echo -en "\e[1A\e[K\e[1A\K" ;printf "\r"

if [ "$MAYBE_TYPE" != "" ]; then
	TYPES="$GIT_COM_TYPES $MAYBE_TYPE"
	TYPE=$(echo $MAYBE_TYPE | sed -e "s/ //g")
else
	echo "‚ö†Ô∏è  You must supply a type"
	exit 1
fi
# uniquify and sort types
if [[ -n "$TYPES" ]]; then
	STORABLE_TYPES=$(echo "$TYPES" \
		| sd "\s+" "\n" \
		| sed -e "s/ //g" \
		| uniq \
		| sort \
		| tr "\n" " " )
	git config "$GIT_CONFIG_FILE" com.types "$STORABLE_TYPES"
fi
clear_last_line


SCOPE=$(gum input --placeholder "scope: a noun describing a section of the codebase")
if [ "$SCOPE" == "" ]; then
	echo "‚ö†Ô∏è  You must supply a scope"
	exit 1
fi

TICKET_COMMAND=$(git config "$GIT_CONFIG_FILE" --get com.ticket-command)
if [ $? -ne 0 ] || [ "$TICKET_COMMAND" == "" ]; then
	TICKET=$(request_ticket_number)
else
	TICKET=$(request_ticket_number "$(eval "TICKET_COMMAND")")
fi


echo "commit title: "
SUMMARY=$(gum input --value "[$SCOPE] $TYPE: ")
if [ "$SUMMARY" == "" ]; then
	echo "‚ö†Ô∏è  You must supply a title"
	exit 1
fi
clear_last_line

MAYBE_TAG=""
echo "tags: "
echo "(optional -- ENTER  to submit, SPACE to choose)"

if [[ ${#TAG_CHOICES[@]} -gt 0 ]]; then
	# choose from list
	MAYBE_TAG=$(gum choose --no-limit ${TAG_CHOICES[@]} ".new" ".none")
	if [[ "$MAYBE_TAG" == *".new"* ]]; then
		MAYBE_TAG=$(echo "$MAYBE_TAG" \
			| sed -e "s/\.new//" \
			  -e "s/\.none//" \
			  -e "s/  / /g")
		MAYBE_TAG="$MAYBE_TAG $(gum input --placeholder "new tag (no spaces):")"
	elif [[ "$MAYBE_TAG" == *".none"* ]]; then
		MAYBE_TAG=""
	fi
else
	MAYBE_TAG=$(gum input --placeholder "tag (optional - no spaces):")
fi
clear_last_2_lines
if [ "$MAYBE_TAG" != "" ]; then
	TAGS="$GIT_COM_TAGS $MAYBE_TAG"
fi

# uniquify and sort tags
if [[ -n "$TAGS" ]]; then
	STORABLE_TAGS=$(echo "$TAGS" \
		| sd "\s+" "\n" \
		| sed -e "s/ //g" \
		| uniq \
		| sort \
		| tr "\n" " " )
	git config "$GIT_CONFIG_FILE" com.tags "$STORABLE_TAGS"
fi

echo "commit details: "
echo "(ESC to end)"
DESCRIPTION=$(gum write --placeholder "Details of this change" \
	| fold -w 50 -s)
[[ -n "$TICKET" ]] && DESCRIPTION="$DESCRIPTION

TICKET: $TICKET"
[[ -n "$TAGS" ]] && DESCRIPTION="$DESCRIPTION

TAGS: $TAGS"

clear_last_2_lines

# TEMPLATE EVAL
if [[ "$DESCRIPTION" == *"\`"* ]]; then
	NEW_DESC=""
	while IFS= read -r line; do
		NEW_DESC="$NEW_DESC
$(eval "echo $line")"
	done <<< "$DESCRIPTION"

	DESCRIPTION="$NEW_DESC"
fi

echo "Your commit message:"
echo "--------------------------------------------------"
echo "$SUMMARY"
echo ""
echo "$DESCRIPTION"
echo "--------------------------------------------------"


# Commit these changes
gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"
