#!/usr/bin/env bash

# an interactive cli tool to help you create commit messages
# that adhere to the Conventional Commits standard
# SUPPORTS SIMPLE TEMPLATING via backticks


# https://www.conventionalcommits.org/en/v1.0.0/#summary
# Based on code from makers of Charm and Gum
# requires gum to be installed.
# https://github.com/charmbracelet/gum
#
# Usage: git ccom
#        just follow the prompts after that.

TYPE=$(gum choose "fix" "feat" "docs" "tweak" "refactor" "test" "chore" "revert")
SCOPE=$(gum input --placeholder "scope (optional): a noun describing a section of the codebase")
TICKET=$(gum input --placeholder "ticket number (optional):")


# Since the scope is optional, wrap it in parentheses if it has a value.
[[ -n "$SCOPE" ]] && SCOPE="($SCOPE)"

# Pre-populate the input with the type(scope): so that the user may change it
echo "commit title: "
SUMMARY=$(gum input --value "$TYPE$SCOPE: ")
MAYBE_TAG=$(gum input --placeholder "tag (optional - no spaces):")
while [ "$MAYBE_TAG" != "" ]
do
	TAGS="$TAGS $MAYBE_TAG"
	MAYBE_TAG=$(gum input --placeholder "tag (optional):")
done
# uniquify and sort tags
if [[ -n "$TAGS" ]]; then
	TAGS=$(echo "$TAGS" | sd "\s+" "\n" | uniq | sort | tr "\n" " ")
fi
echo "commit details: "
echo "(ESC to end)"
DESCRIPTION=$(gum write --placeholder "Details of this change")
[[ -n "$TICKET" ]] && DESCRIPTION="$DESCRIPTION

TICKET: $TICKET"
[[ -n "$TAGS" ]] && DESCRIPTION="$DESCRIPTION

TAGS: $TAGS"

# TEMPLATE EVAL
if [[ "$DESCRIPTION" == *"\`"* ]]; then
	NEW_DESC=""
	while IFS= read -r line; do
		NEW_DESC="$NEW_DESC
$(eval "echo $line")"
	done <<< "$DESCRIPTION"

	DESCRIPTION="$NEW_DESC"
fi

echo "Your commit message:"
echo "--------------------------------------------------"
echo "$SUMMARY"
echo ""
echo "$DESCRIPTION"
echo "--------------------------------------------------"


# Commit these changes
gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"
