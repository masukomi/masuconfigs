# Clu documentation file. Details: https://github.com/masukomi/Clu

# The name of the command or function you're documenting
# This is the thing you type to invoke it. Note: git scripts
# are typically named git-foo but you invoke them as 'git foo'.
# It's your call, but for these I'd recommend using git-foo in
# the name field. This will enable Clu to tell you where it's
# located on your system.
name="find_in_branches"
# a short (one line) description of what it does
short_description="greps each of your branches for a specified string"

# an optional detailed description of what it does.
# definitely include this if you're going to generate a web site.
# Note: You can include markdown in this and have it rendered
# when the web site is generated
#
description="""
`find_in_branches` solves the problem of knowing you've seen something
in your codebase, but not knowing _which branch_ you saw it in.

When searching it will grep for your string and find _all_ of the
local branches that it exists in.

NOTE: "Local branches" being defined as the stuff that `git branch` outputs,
not the _full list_ that you get with `git branch -a`

"""

# If the tool has some sort of usage / help documentation you can
# invoke, enter it in the usage_command. Otherwise, comment that out,
# and document it in the fallback_usage. In TOML you can create a
# multiline string by surrounding it with triple double quotes.
# """ like this """
usage_command="find_in_branches"

# fallback_usage="""
# USAGE: fallback_usage is used when
# usage_command is not present"""

# is this an executable, function, or ???
type="executable"
# what language is it written in?
language="bash"
# where you can find this specific file in source control
source_url=""
# where you can find the repo that contains this file
source_repo_url=""

# additional keywords that might help you find this in a search
# or when browsing by tag. There are more features coming that
# will add functionality based on tags. ;)
#
tags=[ "cli", "git", "search"  ]
